// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts Account[]
  rosters Roster[]
  entries Entry[]
  infos Info[]
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String 
  providerAccountId  String 
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Roster {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  title             String
  description       String
  newMemberAllowed  Boolean
  memberEditable    Boolean
  passCode          String
  memberNumber      Int
  updateNumber      Int
  createdAt         DateTime @default(now())
  requirements      Json? 
  entries Entry[]
  infos Info[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Entry {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  rosterId   String @db.ObjectId  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  infos Info[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roster Roster @relation(fields: [rosterId], references: [id], onDelete: Cascade)
}

model Info {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  rosterId     String @db.ObjectId  
  entryId      String @db.ObjectId
  firstName    String?
  lastName     String?
  email        String?
  phone        String?
  street       String?
  city         String?
  state        String?
  country      String?
  zip          String?
  dateOfBirth  DateTime?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roster Roster @relation(fields: [rosterId], references: [id], onDelete: Cascade)
  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}
